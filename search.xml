<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C/C++算法笔记——基础知识</title>
      <link href="/2023/05/05/C-C-%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/05/05/C-C-%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="🎊基础知识"><a href="#🎊基础知识" class="headerlink" title="🎊基础知识"></a>🎊基础知识</h1><h2 id="🎀if-else"><a href="#🎀if-else" class="headerlink" title="🎀if-else"></a>🎀if-else</h2><p>使用如下方式而不使用if-else，更为简便清晰</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(a &gt;= b ? <span class="string">&quot;A &gt;= B&quot;</span> : <span class="string">&quot;A &lt; B&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="🎀getchar函数"><a href="#🎀getchar函数" class="headerlink" title="🎀getchar函数"></a>🎀getchar函数</h2><p>用来输入单个字符，因此需要注意换行符的存在，可以使用getchar()来读取换行符</p><h2 id="🎀数学函数的使用"><a href="#🎀数学函数的使用" class="headerlink" title="🎀数学函数的使用"></a>🎀数学函数的使用</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span> <span class="comment">//头文件 </span></span></span><br><span class="line"><span class="built_in">fabs</span>(a):a的绝对值</span><br><span class="line"><span class="built_in">floor</span>(a):a的向下取整</span><br><span class="line"><span class="built_in">ceil</span>(a):a的向上取整</span><br><span class="line"><span class="built_in">round</span>(a):a的四舍五入(四舍六入五成双)</span><br><span class="line"><span class="built_in">pow</span>(a,b):a的b次方,b可以为浮点型</span><br><span class="line"><span class="built_in">sqrt</span>(a):a的算术平方根(开根号)</span><br><span class="line"><span class="built_in">log</span>(a):a的以自然对数e为底的对数</span><br></pre></td></tr></table></figure><h2 id="🎀switch-case语句格式"><a href="#🎀switch-case语句格式" class="headerlink" title="🎀switch-case语句格式"></a>🎀switch-case语句格式</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常数表达式<span class="number">1</span>：</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 常数表达式<span class="number">2</span>：</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🎀continue语句"><a href="#🎀continue语句" class="headerlink" title="🎀continue语句"></a>🎀continue语句</h2><p>和break类似，continue也是用在循环当中，但区别是break语句执行后循环就被彻底退出，而continue则只是跳过当前这一轮，继续进行下一轮，并不是停止循环，所以很适合在满足某些条件需要不执行循环体内容时使用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🎀比较两数大小"><a href="#🎀比较两数大小" class="headerlink" title="🎀比较两数大小"></a>🎀比较两数大小</h2><p>C语言快速比较两数大小——<strong>fmax，fmin函数</strong><br>头文件include&lt;math.h&gt;，作用是返回两个浮点参数中较大的一个</p><h2 id="🎀冒泡排序"><a href="#🎀冒泡排序" class="headerlink" title="🎀冒泡排序"></a>🎀冒泡排序</h2><p>——本质在于交换，每趟将最大或者最小值移到最后</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;<span class="comment">//比较趟数，n个数共比较n-1趟</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i; j++) &#123;<span class="comment">//a[0]到a[n-i-1]都与他们的下一个数进行比较</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>交换两个数可以用#include<algorithm>中的swap（a,b）</p><h2 id="🎀memset函数"><a href="#🎀memset函数" class="headerlink" title="🎀memset函数"></a>🎀memset函数</h2><p>——头文件#include&lt;string.h&gt;</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(数组名,值,<span class="built_in">sizeof</span>(数组名));</span><br></pre></td></tr></table></figure><p>一般只建议用memset函数赋值0和-1——memset按照字节赋值，赋值其他数字可以用fill</p><h2 id="🎀字符数组"><a href="#🎀字符数组" class="headerlink" title="🎀字符数组"></a>🎀字符数组</h2><p>char型字符数组的长度比事迹存储字符串的长度至少多1（结束符\0）<br>如果不是使用scanf函数或gets函数输入字符串（如getchar），一定要加入\0，否则会乱码</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">char</span> str[<span class="number">5</span>]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> str[<span class="number">5</span>]=<span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>输出和输出——%c用来输入单个字符，%s用来输入一个字符串并存在字符数组中。</li></ul><p>%c格式能够识别空格跟换行并将其输入，%s通过空格或换行来识别一个字符串的结束。<br><strong>scanf在使用%s不需要&amp;取地址</strong></p><ul><li>getchar()输入，putchar()输出单个字符</li></ul><p>str[i][j]&#x3D;getchar() putchar(str[i][j])   注意：<strong>每行末尾有换行符</strong>,有需要的需要通过gets()或getchar()来处理换行符</p><ul><li><strong>gets(str)输入</strong>和puts()输出一行字符串</li></ul><p>gets()识别\n作为输入结束，<strong>puts()输出自带\n换行</strong>，比printf(“%s\n”,str[i]);更便捷</p><ul><li>字符数组的整行输入</li></ul><p>在比较早的C&#x2F;C++版本中，经常可以看到推荐使用gets函数来进行整行字符串的输入，就像下面这样的简单写法即可输入一整行：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">gets</span>(str);</span><br></pre></td></tr></table></figure><p>但是当输入的字符串长度超过数组长度上限MAX_LEN时，gets函数会把超出的部分也一并读进来，并且会覆盖数组之外的内存空间，这就导致了一定的安全风险，因此C++11标准将gets函数废弃了，然后在C++14时将该函数移除，如果现在想要整行输入的话，推荐使用cin.getline函数；而在C语言标准中gets函数则是在C11时被移除，与此同时增加了gets_s函数，除此之外还有fgets函数可供选择。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> namesapce std;</span><br><span class="line">cin.<span class="built_in">getline</span>(str, MAX_LEN);<span class="comment">//第一个参数为字符数组，第二个参数是最大允许读入的字符个数</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gets_s(str, MAX_LEN);</span><br></pre></td></tr></table></figure><h3 id="🎈string-h头文件"><a href="#🎈string-h头文件" class="headerlink" title="🎈string.h头文件"></a>🎈string.h头文件</h3><p>strlen()函数——得到字符数组中第一个\0前的字符个数<br>strcmp()函数——返回字符串大小的比较结果，比较原则”字典序”<br>strcmp(str1,str2)——str1&lt;str2返回一个负整数；str1&#x3D;str2返回0；str1&gt;str2返回一个正整数</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cin &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&lt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strcpy()函数——把一个字符串复制给另一个字符串<br>strcpy(str1,str2)——把字符数组2复制给字符数组1，包括\0<br>strcat()函数——把一个字符串接到另一个字符串后面<br>strcat(str1,str2)——把字符数组2接到字符数组1后面</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1;</span><br><span class="line">    cin &gt;&gt; s2;</span><br><span class="line">    cout &lt;&lt; s1 + s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🎈sscanf与springf"><a href="#🎈sscanf与springf" class="headerlink" title="🎈sscanf与springf"></a>🎈sscanf与springf</h3><p>假定一个char数组str[100]</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sscanf</span>(str,<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="comment">//把字符数组str中的内容以%d的形式写到n中</span></span><br><span class="line"><span class="comment">//成功返回参数的数目，失败则返回0</span></span><br><span class="line"><span class="built_in">sprintf</span>(str,<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line"><span class="comment">//把n以%d的格式写到字符数组str中</span></span><br></pre></td></tr></table></figure><p>%04d可以输出四位数，不够则前面用0补全，与%.2f有异曲同工之处</p><h2 id="🎀Max值"><a href="#🎀Max值" class="headerlink" title="🎀Max值"></a>🎀Max值</h2><p>求三个数中的最大值，不仅可以自定义函数，也可如下所示：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(&#123;a, b, c&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🎀指针"><a href="#🎀指针" class="headerlink" title="🎀指针"></a>🎀指针</h2><p>获得变量的地址——取地址运算符&amp;</p><h3 id="🎈指针变量"><a href="#🎈指针变量" class="headerlink" title="🎈指针变量"></a>🎈指针变量</h3><p>指针变量用来存放指针（可以理解为地址）——int* p;<br>（一次有好几个同种类型的指针变量 要同时定义，星号只会结合第一个变量名）<br>给指针变量赋值的方式——把变量的地址取出来，然后赋给对应类型的指针变量</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"><span class="comment">//(int*)是指针变量的类型 p才是变量名</span></span><br><span class="line">*p = a的值</span><br><span class="line"><span class="comment">//*作为开启房间的钥匙，放在p的前面，这样*p就可以获取到房间里的东西，即存储的数据</span></span><br><span class="line"><span class="comment">//直接对*p进行赋值，也可以起到改变那个保存的元素的功能</span></span><br></pre></td></tr></table></figure><p>指针变量p+1——p所指的int型变量的下一个int型变量地址（也支持++,–操作）</p><h3 id="🎈指针与数组"><a href="#🎈指针与数组" class="headerlink" title="🎈指针与数组"></a>🎈指针与数组</h3><p>对于数组，可以在元素前面加取地址运算符&amp;来获取它的地址，例如a[0]的地址为&amp;a[0]，即数组a的首地址为&amp;a[0]<br>在C语言中，数组名称也作为数组的首地址使用，a&#x3D;&#x3D;&amp;a[0]</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);<span class="comment">//a+i等同于&amp;a[i]——数组a的首地址偏移i个int型变量的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(a+i));<span class="comment">//a+i只是一个地址，要想访问其中的元素，还是需要*</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针变量可以自增操作</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span>* p = a; p &lt; a+<span class="number">10</span>; p++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🎈使用指针变量作为函数参数"><a href="#🎈使用指针变量作为函数参数" class="headerlink" title="🎈使用指针变量作为函数参数"></a>🎈使用指针变量作为函数参数</h3><p>指针类型也可以作为函数参数的类型，这时视为把变量的地址传入函数。如果在函数中对这个地址中的元素进行改变，原先的数据就会确实地被改变。</p><ul><li>使用指针进行两个数的交换</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span>* b)</span></span>&#123;<span class="comment">//交换</span></span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误写法一</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span>* b)</span></span>&#123;<span class="comment">//交换</span></span><br><span class="line">    <span class="type">int</span>* temp;</span><br><span class="line">    <span class="comment">//在定义temp时，temp没有被初始化，此时temp中存放的地址是随机的，很有可能出错</span></span><br><span class="line">    <span class="comment">/*可以给temp赋个初值</span></span><br><span class="line"><span class="comment">int x;int* temp = &amp;x;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    *temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误写法二</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span>* b)</span></span>&#123;<span class="comment">//交换</span></span><br><span class="line">    <span class="comment">//直接交换两个数的地址，在swap函数中交换后，在main函数中实际并未交换</span></span><br><span class="line">    <span class="comment">//传入swap中的只是a和b的地址，无符号整型的数字而已，并不能实现main函数中的双向交换</span></span><br><span class="line">    <span class="type">int</span>* temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数参数的传送方式是单向一次性的</span></span><br></pre></td></tr></table></figure><h3 id="🎈引用"><a href="#🎈引用" class="headerlink" title="🎈引用"></a>🎈引用</h3><p>——在函数中想要修改传入的参数，但又不想使用指针<br>引用不产生副本，只是给变量起了个别名，对引用变量的操作就是对原变量的操作（取一个小名）</p><ul><li>在函数参数类型后面加一个&amp;即可</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">10</span>;<span class="comment">//不需要return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">change</span>(a);<span class="comment">//a=10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要把引用的&amp;和取地址运算符&amp;区分开来，引用≠取地址</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span>* b)</span></span>&#123;<span class="comment">//错误</span></span><br><span class="line">    <span class="type">int</span>* temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对指针本身的修改无法作用到原指针变量上</span></span><br><span class="line"><span class="comment">//可以通过指针的引用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* &amp;a,<span class="type">int</span>* &amp;b)</span></span>&#123;<span class="comment">//交换</span></span><br><span class="line">    <span class="type">int</span>* temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🎀结构体（struct）的使用"><a href="#🎀结构体（struct）的使用" class="headerlink" title="🎀结构体（struct）的使用"></a>🎀结构体（struct）的使用</h2><h3 id="🎈结构体的定义"><a href="#🎈结构体的定义" class="headerlink" title="🎈结构体的定义"></a>🎈结构体的定义</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Name</span>&#123;</span><br><span class="line"><span class="comment">//一些基本的数据结构或者自定义的数据类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">studentInfo</span>&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> gender;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;Alice,Bob,stu[<span class="number">1000</span>];<span class="comment">//定义结构体变量</span></span><br><span class="line"><span class="comment">//也可以</span></span><br><span class="line">studentInfo Alice;</span><br><span class="line">studentInfo stu[<span class="number">1000</span>];</span><br></pre></td></tr></table></figure><p>结构体里面不能定义自身，但可以定义自身类型的指针变量 studentInfo* next;——√</p><h3 id="🎈访问结构体内的元素"><a href="#🎈访问结构体内的元素" class="headerlink" title="🎈访问结构体内的元素"></a>🎈访问结构体内的元素</h3><p>访问结构体内的元素——“.”操作和“-&gt;”操作</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">studentInfo</span>&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">studentInfo* next;</span><br><span class="line">&#125;stu,*p;<span class="comment">//普通变量stu和指针变量p</span></span><br><span class="line">——访问stu变量</span><br><span class="line">stu.id</span><br><span class="line">stu.name</span><br><span class="line">stu.next</span><br><span class="line">——访问指针变量p中的元素</span><br><span class="line">(*p).<span class="built_in">id</span></span><br><span class="line">(*p).<span class="built_in">name</span></span><br><span class="line">(*p).next</span><br><span class="line">——访问结构体指针变量内元素的更简洁的方法</span><br><span class="line">p-&gt;id</span><br><span class="line">p-&gt;name</span><br><span class="line">p-&gt;next</span><br></pre></td></tr></table></figure><h3 id="🎈结构体的初始化"><a href="#🎈结构体的初始化" class="headerlink" title="🎈结构体的初始化"></a>🎈结构体的初始化</h3><p>构造函数的方式</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">studentInfo</span>&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="comment">//下面的参数用以对结构体内部变量进行赋值</span></span><br><span class="line"><span class="built_in">studentInfo</span>(<span class="type">int</span> _id,<span class="type">char</span> _gender)&#123;</span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        id = _id;</span><br><span class="line">        gender = _gender;</span><br><span class="line">    <span class="comment">//也可以</span></span><br><span class="line">    <span class="built_in">studentInfo</span>(<span class="type">int</span> _id,<span class="type">int</span> _gender):<span class="built_in">id</span>(_id),<span class="built_in">gender</span>(_gender)&#123;&#125;</span><br><span class="line">    <span class="built_in">studentInfo</span>()&#123;&#125;;</span><br><span class="line"><span class="built_in">studentInfo</span>(<span class="type">int</span> _id):<span class="built_in">id</span>(_id)&#123;&#125;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">studentInfo stu = <span class="built_in">studentInfo</span>(<span class="number">10086</span>,<span class="string">&#x27;M&#x27;</span>);</span><br></pre></td></tr></table></figure><p>为了既能不初始化就定义结构变量，又能享受初始化带来的便捷，可以手动加上默认的生成函数，也可以定义参数个数和类型不完全相同的构造函数</p><h2 id="🎀补充"><a href="#🎀补充" class="headerlink" title="🎀补充"></a>🎀补充</h2><h3 id="🎈cin和cout"><a href="#🎈cin和cout" class="headerlink" title="🎈cin和cout"></a>🎈cin和cout</h3><p>——#include<iostream> using namespace std;</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;n&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;endl;<span class="comment">//endl表示换行</span></span><br></pre></td></tr></table></figure><p>保留小数setprecision（n）的用法<br>——头文件#include<iomanip><br>cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;d;</p><h2 id="🎀黑盒测试"><a href="#🎀黑盒测试" class="headerlink" title="🎀黑盒测试"></a>🎀黑盒测试</h2><h3 id="🎈单点测试"><a href="#🎈单点测试" class="headerlink" title="🎈单点测试"></a>🎈单点测试</h3><h3 id="🎈多点测试"><a href="#🎈多点测试" class="headerlink" title="🎈多点测试"></a>🎈多点测试</h3><ol><li>三种输入方式</li></ol><ul><li><strong>while…EOF型</strong></li></ul><p>题目<strong>没有给定输入的结束条件</strong>，默认读取到文件末尾</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a)!=EOF)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读入字符串</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">gets</span>(str)!=<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;str)!=EOF)&#123;&#125;</span><br></pre></td></tr></table></figure><p>只要scanf的返回值不为EOF（文件中的数据没有读完）就反复读入a，执行while中的内容</p><ul><li><strong>while…break型</strong></li></ul><p>题目要求当<strong>输入的数据满足某个条件</strong>时，停止输入<br><strong>w</strong>hile…EOF型的衍生</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b)!=EOF)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>&amp;&amp;b==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简略写法</span></span><br><span class="line"><span class="comment">//a和b中有一个不为0就进行循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b),a||b)&#123;<span class="comment">//a!=0||b!=0</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>while（T–）型</strong></li></ul><p>题目会给出测试数据的组数，接着才给出相应数量组数的输入数据</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>三种输出方法</li></ol><ul><li><strong>正常输出</strong></li><li><strong>每组数据输出后都要额外加一个空行</strong></li><li><strong>两组输出数据之间有一个空行，最后一组数据后面没有空行</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> C语言/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言/C++ </tag>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序设计课程设计——推箱子</title>
      <link href="/2021/01/05/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E6%8E%A8%E7%AE%B1%E5%AD%90/"/>
      <url>/2021/01/05/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E6%8E%A8%E7%AE%B1%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="⛳需求和规格说明"><a href="#⛳需求和规格说明" class="headerlink" title="⛳需求和规格说明"></a>⛳需求和规格说明</h1><p>“推箱子小游戏”要求编写一个推箱子游戏游戏，使用图形界面。<br>推箱子游戏的目：用最少的步数把所有的箱子推到目标位置。</p><h2 id="🎳游戏规则"><a href="#🎳游戏规则" class="headerlink" title="🎳游戏规则"></a>🎳游戏规则</h2><ol><li>游戏开始时，在游戏区域内随机的出现箱子、障碍物、小人以及箱子的目标位置。</li><li>箱子只可以被推动，不可以被拉动。</li><li>用户通过键盘的来控制小人上下左右的移动来推动箱子。记录用户移动小人的次数。</li><li>如果箱子被推到死角，则游戏结束。</li><li>所有箱子被推到目标位置，游戏胜利。</li></ol><h1 id="⛳设计"><a href="#⛳设计" class="headerlink" title="⛳设计"></a>⛳设计</h1><h2 id="🎳需求概要"><a href="#🎳需求概要" class="headerlink" title="🎳需求概要"></a>🎳需求概要</h2><ul><li><p>推箱子游戏的设计目标完成一个比较简单的游戏，使之能够实现推箱子游戏的基本功能，成为一个较为完整的游戏框架。游戏内容为，在一个较为狭小的仓库中，要求把木箱子推到游戏界面中的目标位置，稍不小心就会出现箱子无法移动或者通道被堵住的情况，所以需要玩家巧妙地利用有限的空间和通道，合理安排自己移动的次序和位置，使得顺利完成游戏的任务。</p></li><li><p>用户进入游戏界面后，会出现一个小人，若干个箱子和箱子的目标位置。玩家可以根据自己的想法自由地移动箱子，游戏提供跳关以及退步的功能模块，拼接这些模块，玩家可以实现对游戏的快速通关！</p></li><li><p>由于该程序需要使用图形界面，最终选择使用VS2019软件进行编程。</p></li></ul><h2 id="🎳设计思路"><a href="#🎳设计思路" class="headerlink" title="🎳设计思路"></a>🎳设计思路</h2><p>系统流程图如下所示：<br><img src="https://s1.ax1x.com/2023/05/09/p9BGUkq.jpg#height=363&id=OyCqa&originHeight=726&originWidth=1033&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=517" style="zoom:50%;" /></p><h2 id="🎳设计表示"><a href="#🎳设计表示" class="headerlink" title="🎳设计表示"></a>🎳设计表示</h2><p>头文件总览：</p><table><thead><tr><th align="center"><strong>include</strong></th><th align="center">#include&lt;stdio.h&gt;</th><th align="center">标准输入输出头文件</th></tr></thead><tbody><tr><td align="center"></td><td align="center">#include&lt;stdlib.h&gt;</td><td align="center">system函数的头文件</td></tr><tr><td align="center"></td><td align="center">#include&lt;windows.h&gt;</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">#include&lt;conio.h&gt;</td><td align="center">图形库头文件</td></tr><tr><td align="center"></td><td align="center">#include&lt;graphics.h&gt;</td><td align="center">图形库头文件</td></tr><tr><td align="center">函数总览：</td><td align="center"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center"><strong>函数</strong></th><th align="center">void DrawMap()</th><th align="center">绘制地图，加载图片</th></tr></thead><tbody><tr><td align="center"></td><td align="center">void PlayGame()</td><td align="center">推箱子游戏的主体</td></tr><tr><td align="center"></td><td align="center">int Win()</td><td align="center">判断该关卡是否通关</td></tr><tr><td align="center"></td><td align="center">void TargetCount()</td><td align="center">遍历地图，查看总共的目的地的个数</td></tr><tr><td align="center"></td><td align="center">void InitGame();</td><td align="center">游戏开始前需要做的准备工作</td></tr><tr><td align="center"></td><td align="center">void SaveStep()</td><td align="center">将玩家的每一步都保存起来</td></tr><tr><td align="center"></td><td align="center">void PreviousStep()</td><td align="center">记录上一步</td></tr></tbody></table><p>宏定义：</p><table><thead><tr><th align="center"><strong>宏定义</strong></th><th align="center">#define SIZE 45</th><th align="center">每张贴图的大小</th></tr></thead><tbody><tr><td align="center"></td><td align="center">#define WINDOWSWIDTH (COL*SIZE)</td><td align="center">窗口的宽</td></tr><tr><td align="center"></td><td align="center">#define WINDOWSHEIGHT (ROW*SIZE)</td><td align="center">窗口的高</td></tr><tr><td align="center"></td><td align="center">#define MAXLEVEL 10</td><td align="center">最大关卡数</td></tr></tbody></table><p>定义的变量：</p><table><thead><tr><th align="center"><strong>类型</strong></th><th align="center"><strong>成员名</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">int</td><td align="center">map[20][20]&#x3D;{};</td><td align="center">地图数组</td></tr><tr><td align="center"></td><td align="center">temp[5000][20][20] &#x3D; {}</td><td align="center">临时地图数组</td></tr><tr><td align="center"></td><td align="center">step &#x3D; -1</td><td align="center">计步</td></tr><tr><td align="center"></td><td align="center">ROW &#x3D; 0</td><td align="center">地图的行</td></tr><tr><td align="center"></td><td align="center">COL &#x3D; 0</td><td align="center">地图的列</td></tr><tr><td align="center"></td><td align="center">R</td><td align="center">玩家的横坐标</td></tr><tr><td align="center"></td><td align="center">C</td><td align="center">玩家的纵坐标</td></tr><tr><td align="center"></td><td align="center">targetCount &#x3D; 0</td><td align="center">地图中目的地的个数</td></tr><tr><td align="center"></td><td align="center">gameLevel &#x3D; 1</td><td align="center">游戏关卡</td></tr><tr><td align="center">char</td><td align="center">dir &#x3D; ‘s’</td><td align="center">人物当前的方向</td></tr><tr><td align="center"></td><td align="center">fileName[100]</td><td align="center">存放图片路径的字符串</td></tr><tr><td align="center">IMAGE</td><td align="center">bkImg</td><td align="center">没有墙，人物，箱子的空白图片</td></tr><tr><td align="center"></td><td align="center">boxImg</td><td align="center">箱子的图片</td></tr><tr><td align="center"></td><td align="center">dkboxImg</td><td align="center">箱子推到目的地时的图片</td></tr><tr><td align="center"></td><td align="center">targetImg</td><td align="center">目的地的图片</td></tr><tr><td align="center"></td><td align="center">blankImg</td><td align="center">没有墙，人物，箱子的空白图片</td></tr><tr><td align="center"></td><td align="center">wallImg</td><td align="center">墙面的图片</td></tr><tr><td align="center"></td><td align="center">playerImg[4]</td><td align="center">人物的四各方向的图片</td></tr></tbody></table><h1 id="⛳推箱子的功能框架"><a href="#⛳推箱子的功能框架" class="headerlink" title="⛳推箱子的功能框架"></a>⛳推箱子的功能框架</h1><p><img src="https://s1.ax1x.com/2023/05/09/p9BGt7n.jpg#id=tRh9z&originHeight=483&originWidth=1269&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="🎳初始化模块"><a href="#🎳初始化模块" class="headerlink" title="🎳初始化模块"></a>🎳初始化模块</h2><p>该模块包括屏幕初始化和游戏第一关到最后一关的初始化。屏幕的初始化用于输出操作信息，游戏每一关的初始化时构建每一关的关卡。</p><h2 id="🎳画图模块"><a href="#🎳画图模块" class="headerlink" title="🎳画图模块"></a>🎳画图模块</h2><p>用于画墙，画箱子，画人物，画目的地。</p><h2 id="🎳移动人物模块"><a href="#🎳移动人物模块" class="headerlink" title="🎳移动人物模块"></a>🎳移动人物模块</h2><p>该模块用于移动人物，包括人物与目的地之间，空地与人物之间，空地与箱子之间，箱子与目的地之间的移动变化。</p><h2 id="🎳功能控制模块"><a href="#🎳功能控制模块" class="headerlink" title="🎳功能控制模块"></a>🎳功能控制模块</h2><p>包括判断是否通关，悔步，关卡跳关，关卡重置操作。</p><h1 id="⛳推箱子具有的功能"><a href="#⛳推箱子具有的功能" class="headerlink" title="⛳推箱子具有的功能"></a>⛳推箱子具有的功能</h1><h2 id="🎳能够显示主菜单和游戏界面"><a href="#🎳能够显示主菜单和游戏界面" class="headerlink" title="🎳能够显示主菜单和游戏界面"></a>🎳能够显示主菜单和游戏界面</h2><img src="https://s1.ax1x.com/2023/05/09/p9BGJmj.png#height=325&id=sutgX&originHeight=650&originWidth=440&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=220" style="zoom:50%;" />游戏界面上有一个菜单，可以让玩家进行必要的游戏设置。同时可以将地图中的数字信息转化成对应的图像信息显示在游戏界面上。代码展示：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setfillcolor</span>(<span class="built_in">RGB</span>(<span class="number">235</span>, <span class="number">227</span>, <span class="number">206</span>));   <span class="comment">//填充当前颜色</span></span><br><span class="line"><span class="built_in">fillrectangle</span>(WINDOWSWIDTH, <span class="number">0</span>, WINDOWSWIDTH + <span class="number">220</span>, WINDOWSHEIGHT);   <span class="comment">//窗口大小</span></span><br><span class="line"><span class="built_in">settextcolor</span>(BLACK);</span><br><span class="line"><span class="built_in">settextstyle</span>(<span class="number">20</span>, <span class="number">0</span>, <span class="string">&quot;宋体&quot;</span>);</span><br><span class="line"><span class="built_in">setbkmode</span>(TRANSPARENT);</span><br><span class="line"></span><br><span class="line"><span class="built_in">outtextxy</span>(WINDOWSWIDTH + <span class="number">45</span>, <span class="number">45</span>, <span class="string">&quot;推箱子小游戏&quot;</span>);</span><br><span class="line"><span class="built_in">outtextxy</span>(WINDOWSWIDTH, <span class="number">70</span>, <span class="string">&quot;操作说明:&quot;</span>);</span><br><span class="line"><span class="built_in">outtextxy</span>(WINDOWSWIDTH, <span class="number">95</span>, <span class="string">&quot;WASD 或者↑↓←→&quot;</span>);</span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">&quot;关卡           ：%d/%d&quot;</span>, gameLevel, MAXLEVEL);</span><br><span class="line"><span class="built_in">outtextxy</span>(WINDOWSWIDTH, <span class="number">120</span>, str);</span><br><span class="line"><span class="type">char</span> stepStr[<span class="number">100</span>] = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="🎳能够实现键盘操作的功能"><a href="#🎳能够实现键盘操作的功能" class="headerlink" title="🎳能够实现键盘操作的功能"></a>🎳能够实现键盘操作的功能</h2><p>可以从用户的键盘上获取信息，根据不同的方向键盘所对应的ASCII码数值，实现人物上下左右的移动。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">dir = _getch();         <span class="comment">//从键盘上获取数据</span></span><br><span class="line"><span class="keyword">switch</span> (dir)</span><br></pre></td></tr></table></figure><p>通过#include&lt;conio.h&gt;调用getch函数，用来获取键值，再通过switch-case实现人物的移动</p><h3 id="🥌计算说明书部分"><a href="#🥌计算说明书部分" class="headerlink" title="🥌计算说明书部分"></a>🥌计算说明书部分</h3><p>假设空地为0，墙面为1，目的地为3，箱子为4，人物为5。这样子的目的是使得地图看起来更加规则，后面移动时的操作更加简洁明了。<br><img src="https://s1.ax1x.com/2023/05/09/p9BG8XQ.png#height=244&id=OKQgF&originHeight=486&originWidth=301&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=151"><br>上图为第一关的地图</p><ul><li>人物移动到空地上的数值变化就是0-&gt;5</li><li>箱子移动到空地上的数值变化就是0-&gt;4</li><li>人移动到目的地上时的数据变化就是3-&gt;8(3+5)</li><li>箱子移动到目的地上时的数据变化就是3-&gt;7(3+4)</li><li>根据每一次的移动，来改变原来位置和现在移动的位置所对应的数据变化，还原出地图所对应的数字模型。在编写程序的时候，分为四个方向——上下左右，依次分类讨论。由于四个方向的思路几乎相同，则可以重点编写一个方向所对应的数字改变，剩余的四个方向以此类推少做略微改变即可。</li><li>(下面以玩家进行向上移动时的数字改变为例子的代码显示)</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">72</span>:               <span class="comment">//方向键上</span></span><br><span class="line"><span class="keyword">if</span> (map[R - <span class="number">1</span>][C] == <span class="number">0</span>)  <span class="comment">// 1 人上面是空地（0）</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (map[R][C] == <span class="number">5</span> || map[R][C] == <span class="number">8</span>)<span class="comment">// 1.1所站的地方以前是空地（5+0）</span></span><br><span class="line">&#123;<span class="comment">// 1.2所站的地方以前是目的地（3+5）</span></span><br><span class="line">map[R][C] -= <span class="number">5</span>;</span><br><span class="line">map[R - <span class="number">1</span>][C] = <span class="number">5</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (map[R - <span class="number">1</span>][C] == <span class="number">4</span>)  <span class="comment">// 2 人上面是箱子（4）</span></span><br><span class="line">&#123;<span class="comment">//2.1所站的地方以前是空地（5+0)</span></span><br><span class="line"><span class="keyword">if</span> (map[R][C] == <span class="number">5</span> || map[R][C] == <span class="number">8</span>) <span class="comment">//2.1.1箱子的上面是空地(0)</span></span><br><span class="line">&#123;        <span class="comment">//2.1.2箱子的上面是目的地(3)</span></span><br><span class="line">        <span class="comment">//2.2所站的地方以前是目的地(5+3)</span></span><br><span class="line"><span class="keyword">if</span> (map[R - <span class="number">2</span>][C] == <span class="number">0</span> || map[R - <span class="number">2</span>][C] == <span class="number">3</span>)<span class="comment">//2.2.1箱子的上面是空地(0)</span></span><br><span class="line">&#123;        <span class="comment">//2.2.2箱子的上面是目的地(3)</span></span><br><span class="line">map[R][C] -= <span class="number">5</span>;</span><br><span class="line">map[R - <span class="number">1</span>][C] = <span class="number">5</span>;</span><br><span class="line">map[R - <span class="number">2</span>][C] += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (map[R - <span class="number">1</span>][C] == <span class="number">3</span>)          <span class="comment">//3人上面是目的地(3)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (map[R][C] == <span class="number">5</span> || map[R][C] == <span class="number">8</span>)                 <span class="comment">//3.1人所站的地方是空地(5+0)</span></span><br><span class="line">&#123;                     <span class="comment">//3.2人所站的地方是目的地(5+3)</span></span><br><span class="line">map[R][C] -= <span class="number">5</span>;</span><br><span class="line">map[R - <span class="number">1</span>][C] = <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (map[R - <span class="number">1</span>][C] == <span class="number">7</span>)            <span class="comment">//4人上面是在目的地的箱子也就是(3+4)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (map[R][C] == <span class="number">5</span> || map[R][C] == <span class="number">8</span>)<span class="comment">//4.1人所站的地方以前是空地（0+5） </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (map[R - <span class="number">2</span>][C] == <span class="number">0</span> || map[R - <span class="number">2</span>][C] == <span class="number">3</span>)          <span class="comment">//4.1.1箱子的上面是空地（0)</span></span><br><span class="line">&#123;               <span class="comment">//4.1.2箱子的上面是目的地（3）</span></span><br><span class="line">map[R][C] -= <span class="number">5</span>;                                    <span class="comment">//4.2人所站的地方以前是目的地（3+5）       </span></span><br><span class="line">map[R - <span class="number">1</span>][C] = <span class="number">8</span>;                                 <span class="comment">//4.2.1箱子的上面是空地（0）</span></span><br><span class="line">map[R - <span class="number">2</span>][C] += <span class="number">4</span>;                                <span class="comment">//4.2.2箱子的上面是目的地（3）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">SaveStep</span>();<span class="comment">//将每一步走之后的地图信息都保存起来</span></span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h2 id="🎳能够实现箱子到达目的地的时候的变色显示"><a href="#🎳能够实现箱子到达目的地的时候的变色显示" class="headerlink" title="🎳能够实现箱子到达目的地的时候的变色显示"></a>🎳能够实现箱子到达目的地的时候的变色显示</h2><p>当玩家把箱子推到指定的位置的时候，需要实现箱子的变色，这样可以明确的告诉玩家，您的箱子已经到达指定的目的地。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">7</span>:     <span class="comment">//箱子被推到了目的地 4+3</span></span><br><span class="line"><span class="built_in">putimage</span>(j * SIZE, i * SIZE, &amp;dkboxImg);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2023/05/09/p9BG36g.png#height=359&id=ys0YL&originHeight=717&originWidth=724&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=362" style="zoom:50%;" /><h2 id="🎳能够实现人物的方向运动"><a href="#🎳能够实现人物的方向运动" class="headerlink" title="🎳能够实现人物的方向运动"></a>🎳能够实现人物的方向运动</h2><p>当玩家通过上下左右的按键操控游戏中的人物进行运动的时候，人物也会随着方向键的改变，改变其旋转的方向。可以使得游戏更加生动，增加可玩性。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (dir)      <span class="comment">//从键盘中获取键值，以改变人物图片的方向</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span><span class="number">&#x27;</span>W<span class="number">&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">72</span>:</span><br><span class="line"><span class="built_in">putimage</span>(j * SIZE, i * SIZE, &amp;playerImg[<span class="number">0</span>]); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span><span class="number">&#x27;</span>S<span class="number">&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line"><span class="built_in">putimage</span>(j * SIZE, i * SIZE, &amp;playerImg[<span class="number">1</span>]); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span><span class="number">&#x27;</span>A<span class="number">&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line"><span class="built_in">putimage</span>(j * SIZE, i * SIZE, &amp;playerImg[<span class="number">2</span>]); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span><span class="number">&#x27;</span>D<span class="number">&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line"><span class="built_in">putimage</span>(j * SIZE, i * SIZE, &amp;playerImg[<span class="number">3</span>]); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">putimage</span>(j * SIZE, i * SIZE, &amp;playerImg[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>通过玩家的上下左右的操作中获取键值，再次通过switch-case函数通过不同的键值显示不同的人物方向。<br><img src="https://s1.ax1x.com/2023/05/09/p9BGY0s.png#id=B1r8V&originHeight=129&originWidth=1094&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://s1.ax1x.com/2023/05/09/p9BGrX4.png#id=h1YYX&originHeight=232&originWidth=1386&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="🎳能够实现人物的方向运动-1"><a href="#🎳能够实现人物的方向运动-1" class="headerlink" title="🎳能够实现人物的方向运动"></a>🎳能够实现人物的方向运动</h2><p>在游戏中，当玩家把所有的箱子都推到指定的目的地的时候，系统会进行判断。会跳出一个窗口，提示是否进入下一关游戏还是选择退出该游戏。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">TargetCount</span><span class="params">()</span>             <span class="comment">//遍历地图，查看总共的目的地的个数，用于判断是否将所有箱子移动到了目的地</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">targetCount = <span class="number">0</span>;<span class="comment">//每次调用函数都需要将targetCount初始化为零，不然就是在上一次的基础上++了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="number">3</span> || map[i][j] == <span class="number">7</span>)        </span><br><span class="line">targetCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Win</span><span class="params">()</span>          <span class="comment">//判断是否通关 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> boxToTargetCount = <span class="number">0</span>;       <span class="comment">//在目的地的箱子个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)           <span class="comment">//遍历整张地图</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)       </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="number">7</span>)         <span class="comment">//所有的箱子到达目的地（3+4=7）</span></span><br><span class="line">&#123;</span><br><span class="line">boxToTargetCount++; </span><br><span class="line"><span class="keyword">if</span> (boxToTargetCount == targetCount)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (gameLevel == MAXLEVEL)        <span class="comment">//是否通过了全部的关卡</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">&quot;恭喜你全部通关，太棒了！&quot;</span>, <span class="string">&quot;通关&quot;</span>, MB_OKCANCEL | MB_SYSTEMMODAL);       <span class="comment">//弹框函数</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//过关，返回选择函数值 1 确定 2取消</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">&quot;你真棒，继续下一关吧！&quot;</span>, <span class="string">&quot;获胜&quot;</span>, MB_OKCANCEL | MB_SYSTEMMODAL));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过两个函数的共同作用，以判断该关卡是否成功。</p><ul><li>void TargetCount()遍历地图，查看总共的目的地的个数</li><li>int Win()判断该关卡是否通关</li></ul><p>再通过Win函数中弹框函数获取用户点击的选项所对应的数值判断是进去下一关还是退出游戏。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> select = <span class="built_in">Win</span>();      <span class="comment">//是否继续下一关，1 确定 2  取消</span></span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">        gameLevel++;</span><br><span class="line"><span class="built_in">InitGame</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">closegraph</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s1.ax1x.com/2023/05/09/p9BGat0.png#height=156&id=m0YFt&originHeight=312&originWidth=474&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=237" style="zoom:50%;" />点击确定则进去下一个关卡，点击取消则直接退出游戏。<h2 id="🎳能够实现跳过关卡的功能"><a href="#🎳能够实现跳过关卡的功能" class="headerlink" title="🎳能够实现跳过关卡的功能"></a>🎳能够实现跳过关卡的功能</h2><p>玩家可以通过对应的按键进行选择上一关或者下一关的选择，进行跳关选项。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:<span class="comment">//上一关</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (gameLevel &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">gameLevel--;</span><br><span class="line"><span class="built_in">InitGame</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>:<span class="comment">//下一关</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span> (gameLevel &lt; MAXLEVEL)</span><br><span class="line">&#123;</span><br><span class="line">gameLevel++;</span><br><span class="line"><span class="built_in">InitGame</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🎳能够实现悔步的操作"><a href="#🎳能够实现悔步的操作" class="headerlink" title="🎳能够实现悔步的操作"></a>🎳能够实现悔步的操作</h2><p>系统会记录每一步的运动，玩家可以通过按键的操控，实现悔步。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SaveStep</span><span class="params">()</span>                  <span class="comment">//将玩家的每一步都保存起来，以便于回退操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">step += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line">temp[step][i][j] = map[i][j];        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>  <span class="title">PreviousStep</span><span class="params">()</span><span class="comment">//上一步，以实现回退操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (step &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">step--;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line">map[i][j] = temp[step][i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过两个函数的共同协助完成悔步的操作。</p><ul><li>void SaveStep()——将玩家的每一步都保存起来</li><li>void  PreviousStep()——记录上一步</li></ul><p>在人物移动的每一步时，都会通过SaveStep()函数，保存玩家的每一步。（通过ESC实现回退操作的代码显示）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">27</span>:<span class="comment">//ESC按键ASCII值   回退</span></span><br><span class="line"><span class="built_in">PreviousStep</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>(下图为通过按ESC实现悔步操作)<br><img src="https://s1.ax1x.com/2023/05/09/p9BG0pT.png#height=437&id=VR5TM&originHeight=874&originWidth=1254&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=627" style="zoom:50%;" /><br><img src="https://s1.ax1x.com/2023/05/09/p9BGDcF.png#height=437&id=kvJXb&originHeight=874&originWidth=1254&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=627" style="zoom:50%;" /></p><h2 id="🎳能够实现记录步数的操作"><a href="#🎳能够实现记录步数的操作" class="headerlink" title="🎳能够实现记录步数的操作"></a>🎳能够实现记录步数的操作</h2><p>在功能菜单界面，会显示当前步数，随时记录玩家都在游戏过程中的总步数。每启用一次SaveStep()函数就会实现Step+1</p><ul><li>这里需要注意的是：</li></ul><p>判断是不是重新开始，因为运行程序开始和按了R开始两种情况是不一样的；如果是第一次开始，在主函数中执行DrawMap函数之后就会等待玩家按了按键之后，才再次执行DrawMap函数，这种情况step是从-1开始计步的，这时显示时就需要+1。而如果按了R重新开始，这时执行了InitGame函数，然后PlayGame函数执行完毕，就会继续执行DrawMap函数，这时step是为0的就不需要+1了。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (step == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(stepStr, <span class="string">&quot;步数           ：%d&quot;</span>, step + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">outtextxy</span>(WINDOWSWIDTH, <span class="number">145</span>, stepStr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(stepStr, <span class="string">&quot;步数           ：%d&quot;</span>, step);</span><br><span class="line"><span class="built_in">outtextxy</span>(WINDOWSWIDTH, <span class="number">145</span>, stepStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="⛳用户手册"><a href="#⛳用户手册" class="headerlink" title="⛳用户手册"></a>⛳用户手册</h1><p>本游戏一共有10关，从易到难，每一关都可以进行重新开始，回退，记录步数，返回上一关，进入下一关等操作。</p><h2 id="🎳操作说明"><a href="#🎳操作说明" class="headerlink" title="🎳操作说明"></a>🎳操作说明</h2><ul><li>可以通过按动键盘“WASD”或者“↑↓←→”对游戏中的小人物进行操控；</li><li>可以通过按动键盘“Esc”键来进行回退上一步，及允许用户悔步；</li><li>可以通过按动键盘“R”对该局游戏重新开始；</li><li>可以通过按动键盘“X”直接进入上一关；</li><li>可以通过按动键盘“N”直接进入下一关；</li><li>通过界面上的步数，可以直接看出本局用户行走的步数。</li></ul><h1 id="⛳调试及测试"><a href="#⛳调试及测试" class="headerlink" title="⛳调试及测试"></a>⛳调试及测试</h1><h2 id="🎳地图部分"><a href="#🎳地图部分" class="headerlink" title="🎳地图部分"></a>🎳地图部分</h2><p>刚开始只编辑了一张地图并且直接在程序中体现<br><img src="https://s1.ax1x.com/2023/05/09/p9BGdhV.png#id=H8qux&originHeight=411&originWidth=1043&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>后续为了实现选关和增加关卡的数量，选择使用TXT文件</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载地图</span></span><br><span class="line"><span class="type">char</span>  fileName[<span class="number">100</span>] = <span class="string">&quot;&quot;</span>;      <span class="comment">//定义</span></span><br><span class="line"><span class="built_in">sprintf</span>(fileName, <span class="string">&quot;./第%d关.txt&quot;</span>, gameLevel);      <span class="comment">//为了简化代码以及便于增加游戏关卡数，采用读取TXT文件的方法</span></span><br><span class="line"></span><br><span class="line">FILE* file;         </span><br><span class="line"><span class="keyword">if</span> ((file = <span class="built_in">fopen</span>(fileName, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fscanf</span>(file, <span class="string">&quot;%d&quot;</span>, &amp;ROW);       <span class="comment">//地图的行</span></span><br><span class="line"><span class="built_in">fscanf</span>(file, <span class="string">&quot;%d&quot;</span>, &amp;COL);       <span class="comment">//地图的列    （读取行列数以便控制窗口的大小和遍历）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fscanf</span>(file, <span class="string">&quot;%d&quot;</span>, &amp;map[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">rewind</span>(file);     <span class="comment">//文件指针回绕到文件起始处</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🎳步数计算部分"><a href="#🎳步数计算部分" class="headerlink" title="🎳步数计算部分"></a>🎳步数计算部分</h2><p>关卡重置后会发现当前步数多1<br>需要判断是不是重新开始，因为运行程序开始和按了R开始两种情况是不一样的。如果是第一次开始，在主函数中执行DrawMap函数之后就会等待玩家按了按键之后，才再次执行DrawMap函数，这种情况step是从-1开始计步的，这时显示时就需要+1。而如果按了R重新开始，这时执行了InitGame函数，然后PlayGame函数执行完毕。就会继续执行DrawMap函数，这时step是为0的就不需要+1了。</p><h1 id="⛳运行示例"><a href="#⛳运行示例" class="headerlink" title="⛳运行示例"></a>⛳运行示例</h1><img src="https://s1.ax1x.com/2023/05/09/p9BGB1U.png#height=392&id=cHGpX&originHeight=784&originWidth=984&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=492" style="zoom:50%;" /><img src="https://s1.ax1x.com/2023/05/09/p9BGynJ.png#height=392&id=nXW0X&originHeight=784&originWidth=1164&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=582" style="zoom:50%;" /><h1 id="⛳进一步改进"><a href="#⛳进一步改进" class="headerlink" title="⛳进一步改进"></a>⛳进一步改进</h1><ol><li>可以增加一个菜单界面，使用户更加清楚自己接下来的操作（如增加游戏规则说明，选择关卡等）；</li><li>可以增加背景音乐，使得该小游戏更加可玩，有趣；</li><li>可以改变背景颜色，增加人物颜色的可选择性等；</li><li>代码可以更加简单明了一些。</li></ol><h1 id="💡程序代码"><a href="#💡程序代码" class="headerlink" title="💡程序代码"></a>💡程序代码</h1><p>代码已开源至Github<a href="https://github.com/xiayi0409/Cassie/tree/main/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1-%E6%8E%A8%E7%AE%B1%E5%AD%90%E5%B0%8F%E6%B8%B8%E6%88%8F">Cassie&#x2F;程序设计课程设计-推箱子小游戏 at main · xiayi0409&#x2F;Cassie · GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> C语言/C++ </category>
          
          <category> 课程设计 </category>
          
          <category> 程序设计技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言/C++ </tag>
            
            <tag> 课程设计 </tag>
            
            <tag> 程序设计技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
